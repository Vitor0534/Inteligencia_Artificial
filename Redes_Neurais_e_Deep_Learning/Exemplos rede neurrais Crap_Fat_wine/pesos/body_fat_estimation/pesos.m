function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 30-Nov-2019 00:28:10.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 13xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [11.03;0.74;1.36;10.6;70;0.98;0.34;0.13;0.41;1.28;0.48;1.27;278];
x1_step1.gain = [0.526315789473684;0.395256916996047;1.06951871657754;0.103092783505155;0.0217391304347826;0.689655172413793;0.421940928270042;3.77358490566038;0.630914826498423;0.170648464163823;1.6260162601626;0.732600732600733;0.0014265335235378];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.5099538403873884462;-1.1511767593597683756;-0.84882772130057659865;0.1245528568716161022;-0.53411987655831882904;-0.28692035006414645659;0.55952359254801142807;0.97638019624787764084;1.1636971895753962514;1.6779282241485888871];
IW1_1 = [-0.095334859514307951356 0.27190522215440116049 -0.19094646558480921072 -0.62583686352881706672 0.82807607135521343888 -0.73000076614696540744 0.40347268721368167999 0.78436422558482310485 -0.31089995608110626568 0.30278814641294360399 0.54519826482664535128 0.48410674323177604883 0.29208502714694134506;-0.58234413582592892134 -0.87121576218832808003 -0.67358055178124420781 0.3226679206820120549 0.052150823280303390539 -0.1793731496917167767 0.3968402864380204953 0.015235956150775708043 0.11049466698040247281 -1.065275879651265134 0.39689014749309126096 -0.154678854748721617 -1.548857897746677148;1.0069125868359709575 -0.13981789006058581437 1.1117657543402648113 -0.21612463766226330808 0.17105429997513463269 -0.37139717000509842038 -1.2442961067979267931 -0.33512054938986829411 -0.32178709595946725086 0.8657173042888903769 -1.0997598570453650524 -0.3381050759281740703 0.63623978671279290964;-1.0224129505328303225 0.68166562460459212414 -0.94978175973092437978 0.3051934063877047576 -0.016142178470041991523 -0.61833891974688903748 -0.97641099310652301746 -0.47144763211208112752 0.13450895685069116925 0.31948820493312402036 0.083485226667486700514 -0.33567725936195308423 -1.2103512867095425065;0.15791201061241860737 -0.068080981410344743043 0.23217848841039720464 0.46815907583669907899 -0.58787335929382766864 -0.70623276160309800265 -0.58767930504542587045 0.30391623053681277034 0.48883165778999049245 -0.45054592499660850446 -0.42859312325509790753 -1.0607693057116514002 0.00028303051570182768265;-0.92101138801990889426 -0.6115350214260030226 -0.17079300071869144007 -0.13628668049909964388 0.32557764890511803335 -0.2367296367355812281 -0.18640162832620327249 0.46923078804169432443 0.11406841802375708439 -0.50028091558355669566 0.40339491205860023015 -0.68663963408531969446 -1.060314023947819928;0.10062229301095718115 -0.11004514352445314562 -0.31759797415079871197 -0.42033237939010137385 0.44407539578162508187 -0.53590437066476670491 0.54540556640704185298 -0.023884442812241692827 0.83810233568979430885 -0.85276651958350269123 -0.50097589819995180793 0.79453157509202321229 0.33025343288065794889;0.25246981187856537554 0.20300153290975497811 -0.63567714652774209849 -0.07051149589069591328 0.57071595635471461527 0.59267972031661209087 0.4407020118373442541 -0.93756259428814481272 0.53763150367882683867 -0.21992492476975544768 0.52307629730396376644 0.75934364430558454195 -0.33680883407252953932;0.31286052320825524786 0.46221690852008429085 -0.0080697441734431767102 -0.46406802484659631647 -0.27332908055261317948 -0.021815267579687502159 0.59645102530938887142 -0.39837983985845587531 0.84446741920666368308 0.86760510201117801987 -0.16305063923198306886 -0.74656902726914087243 -0.14848393719620395226;0.44619228139197364413 -0.6555261334972869447 -0.010356837420592651666 0.58132083033092185609 0.20421695880166537695 0.4298074813487739454 0.48258461060297586087 -0.71912439977524633683 -0.48676356180519564365 -0.30108275806220147208 -0.028685951111887250664 -0.24897662579194496102 -0.70663067619298414179];

% Layer 2
b2 = [-0.66548110043637687117;0.78628993177533268444;0.28838294140431519619];
LW2_1 = [0.72176775122524494677 -0.75383846077284799581 0.4405616950137512533 -2.0997672023710913791 -1.0107592925779067539 -0.55649155786660098322 0.53156349462438934328 0.94031159776610417911 0.20391197100968205813 0.84004276988748538546;-0.0085140591349537452642 1.6159479306202932936 -1.2640597322382807199 0.97413647622807963966 -0.20126698060882466934 1.0509747541989662434 0.2754022508513275791 0.47780023448832886768 -0.14493201059379740014 -0.51849071822462855508;-0.10092221499432517395 -0.42653096289702824295 2.3434531926579027505 0.43452513040374052267 0.56570204408440394328 0.28742832438399490425 -0.95019334193564486402 -0.55553790426308902184 0.41391851651313976701 -0.41596378303346304151];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
